<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>譯鋒說</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-18T02:02:06.790Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>譯鋒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C的重要性</title>
    <link href="http://example.com/2024/01/18/C%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <id>http://example.com/2024/01/18/C%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</id>
    <published>2024-01-18T02:02:06.000Z</published>
    <updated>2024-01-18T02:02:06.790Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言笔记 大纲</title>
    <link href="http://example.com/2023/12/16/%E9%83%9D%E6%96%8C-C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/%E9%83%9D%E6%96%8C-C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/12/16/%E9%83%9D%E6%96%8C-C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/%E9%83%9D%E6%96%8C-C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</id>
    <published>2023-12-16T00:11:50.000Z</published>
    <updated>2024-01-19T09:09:11.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a>C语言概述</h1><h2 id="为什么学习C语言"><a href="#为什么学习C语言" class="headerlink" title="为什么学习C语言"></a>为什么学习C语言</h2><h3 id="C的起源和发展"><a href="#C的起源和发展" class="headerlink" title="C的起源和发展"></a>C的起源和发展</h3><p>第一代语言 —— 机器语言<br>第二代语言 —— 汇编语言<br>第三代高级语言 —— 结构化 &amp;&amp; 面向对象（OO）</p><p>高级语言：<code>a + b</code><br>汇编语言：<code>ADD AX, BX</code><br>机器语言：<code>0000 0001 1101 10000</code></p><p>C语言产生和发展过程<br>&ensp;&emsp;产生时间：1972-1973<br>&ensp;&emsp;产生地点：美国贝尔实验室（Bell）<br>&ensp;&emsp;创始人：Dennis.M.R</p><p>C语言发展过程<br>&ensp;&emsp;1983年 ANSI C<br>&ensp;&emsp;1987年 ANSI C 87<br>&ensp;&emsp;1994年 C99</p><h3 id="C的特点"><a href="#C的特点" class="headerlink" title="C的特点"></a>C的特点</h3><p>&ensp;&emsp;优点：<br>&ensp;&emsp;&ensp;&emsp;代码量小 速度快 功能强大<br>&ensp;&emsp;缺点：<br>&ensp;&emsp;&ensp;&emsp;危险性高 开发周期长 可移植性不强</p><h3 id="C的应用领域"><a href="#C的应用领域" class="headerlink" title="C的应用领域"></a>C的应用领域</h3><p>系统软件开发<br>&ensp;&emsp;操作系统：Windows、Linux、Unix<br>&ensp;&emsp;驱动程序：主板驱动、显卡驱动、摄像头驱动<br>&ensp;&emsp;数据库：DB2、Oracle、SQL Server<br>应用软件开发<br>&ensp;&emsp;办公软件：WPS<br>&ensp;&emsp;图形图像多媒体：ACDSee Photoshop MediaPlayer<br>&ensp;&emsp;嵌入式软件开发：智能手机、掌上电脑<br>&ensp;&emsp;游戏开发：2D、3D游戏</p><h3 id="C的重要性"><a href="#C的重要性" class="headerlink" title="C的重要性"></a>C的重要性</h3><p>&ensp;&emsp;有史以来最重要语言<br>&ensp;&emsp;所有大学工科和理科学生必修课程<br>&ensp;&emsp;最重要系统软件：windows、linux、unix 均使用C开发<br>&ensp;&emsp;一名合格的黑客必须掌握的语言<br>&ensp;&emsp;大企业、外企招聘程序员必考的语言<br>&ensp;&emsp;为学习数据结构、C++、Java、C#奠定基础</p><h3 id="怎样学习C语言"><a href="#怎样学习C语言" class="headerlink" title="怎样学习C语言"></a>怎样学习C语言</h3><h3 id="学习的目标"><a href="#学习的目标" class="headerlink" title="学习的目标"></a>学习的目标</h3><h3 id="常见问题答疑"><a href="#常见问题答疑" class="headerlink" title="常见问题答疑"></a>常见问题答疑</h3><p>&ensp;&emsp; 1）学习Java为什么先学C语言<br>&ensp;&emsp; 2）没学过计算机专业课程能够学懂C语言吗<br>&ensp;&emsp; 3）英语和数学不好能学好C吗</p><h3 id="课程计划"><a href="#课程计划" class="headerlink" title="课程计划"></a>课程计划</h3><h3 id="举例-一元二次方程"><a href="#举例-一元二次方程" class="headerlink" title="举例-一元二次方程"></a>举例-一元二次方程</h3><h2 id="C语言编程预备知识"><a href="#C语言编程预备知识" class="headerlink" title="C语言编程预备知识"></a>C语言编程预备知识</h2><h3 id="1-CPU-内存条-硬盘-显卡-主板-显示器-之间的关系"><a href="#1-CPU-内存条-硬盘-显卡-主板-显示器-之间的关系" class="headerlink" title="1.CPU 内存条 硬盘 显卡 主板 显示器 之间的关系"></a>1.CPU 内存条 硬盘 显卡 主板 显示器 之间的关系</h3><h3 id="2-hello-world程序如何运行起来的"><a href="#2-hello-world程序如何运行起来的" class="headerlink" title="2.hello world程序如何运行起来的"></a>2.hello world程序如何运行起来的</h3><h3 id="3-什么是数据类型"><a href="#3-什么是数据类型" class="headerlink" title="3.什么是数据类型"></a>3.什么是数据类型</h3><p>基本类型数据<br>&ensp;&emsp;整数<br>&ensp;&emsp;&ensp;&emsp;整型  ——  int —— 4<br>&ensp;&emsp;&ensp;&emsp;短整型  ——  short int —— 2<br>&ensp;&emsp;&ensp;&emsp;长整型  ——  long int —— 8</p><p>&ensp;&emsp;浮点数（实数）<br>&ensp;&emsp;&ensp;&emsp;单精度浮点数 —— float —— 4<br>&ensp;&emsp;&ensp;&emsp;双精度浮点数 —— double —— 8</p><p>&ensp;&emsp;字符<br>&ensp;&emsp;&ensp;&emsp;char —— 1</p><p>&ensp;&emsp;复合类型数据</p><p>&ensp;&emsp;结构体</p><p>&ensp;&emsp;枚举</p><p>&ensp;&emsp;共用体</p><h3 id="4-什么是变量"><a href="#4-什么是变量" class="headerlink" title="4.什么是变量"></a>4.什么是变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  </span><br><span class="line">  i = <span class="number">3</span>; <span class="comment">//3最终是存放在内存中，程序终止之后3所占的空间被释放</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;变量的本质就是内存中一段存储空间</p><h3 id="5-cpu-内存条-vc-6-0-操作系统-之间的关系"><a href="#5-cpu-内存条-vc-6-0-操作系统-之间的关系" class="headerlink" title="5.cpu 内存条 vc++6.0 操作系统 之间的关系"></a>5.cpu 内存条 vc++6.0 操作系统 之间的关系</h3><h3 id="6-变量为什么必须初始化"><a href="#6-变量为什么必须初始化" class="headerlink" title="6.变量为什么必须初始化"></a>6.变量为什么必须初始化</h3><p>&ensp;&emsp;所谓初始化就是赋值的意思</p><h3 id="7-如何定义变量"><a href="#7-如何定义变量" class="headerlink" title="7.如何定义变量"></a>7.如何定义变量</h3><p><code>数据类型  变量名 = 要赋的值；</code><br>等价于<br><code>数据类型 变量名；</code><br><code>变量名 = 要赋的值；</code><br>举例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">3</span>;  等价于  <span class="type">int</span> i; i = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, j;  等价于 <span class="type">int</span> i; <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">3</span>, j = <span class="number">5</span>;  等价于 <span class="type">int</span> i; <span class="type">int</span> j; i = <span class="number">3</span>; j = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="8-什么是进制"><a href="#8-什么是进制" class="headerlink" title="8.什么是进制"></a>8.什么是进制</h3><p>&ensp;&emsp;进制就是逢几进一<br>&ensp;&emsp;我们说N进制实际就是指逢N进一<br>&ensp;&emsp;我们计算机只识别二进制<br>&ensp;&emsp;人类最习惯使用的是十进制<br>&ensp;&emsp;为了实际需要 我们又建立了八进制和十六进制<br>&ensp;&emsp;C语言规定八进制前要加0（注意是零不是字母o），十六进制前要加0x或0X，十进制前什么都不加！</p><h4 id="不同进制数的表示"><a href="#不同进制数的表示" class="headerlink" title="不同进制数的表示"></a>不同进制数的表示</h4><p>&ensp;&emsp;在汇编中：在数字后加字母B表示二进制数，加字母O表示八进制数，加字母D表示十进制数，加字母H表示十六进制数。<br>例：<br>&ensp;&emsp;1011B为二进制数1011，也记作(1011)_2<br>&ensp;&emsp;1357O为八进制数1357，也记作(1357)_8<br>&ensp;&emsp;2049D为十进制数2049，也记作(2049)_10<br>&ensp;&emsp;3FB9H为十六进制数3FB9，也记作(3FB9)_16</p><h4 id="什么叫N进制"><a href="#什么叫N进制" class="headerlink" title="什么叫N进制"></a>什么叫N进制</h4><h5 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h5><p>&ensp;&emsp;10个基数，逢10进一<br>&ensp;&emsp;基数：0 1 2 3 4 5 6 7 8 9</p><h5 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h5><p>&ensp;&emsp;2个基数，逢2进一<br>&ensp;&emsp;基数：0 1<br>&ensp;&emsp;2→10  3→11  4→100  5→101</p><h5 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h5><p>&ensp;&emsp;8个基数 逢8进一<br>&ensp;&emsp;基数：0 1 2 3 4 5 6 7<br>&ensp;&emsp;8→10  9→11  10→12</p><h5 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h5><p>&ensp;&emsp;十六个基数，逢十六进一<br>&ensp;&emsp;基数：0 1 2 3 4 5 6 7 8 9 A B C D E F<br>&ensp;&emsp;或者：0 1 2 3 4 5 6 7 8 9 a b c d e f<br>&ensp;&emsp;16→10  17→11 18→12  19→13</p><img src="https://pic.imgdb.cn/item/65a8a213871b83018a521da2.png" class="nofancybox" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * printf 的用法</span></span><br><span class="line"><span class="comment">         * %d表示以十进制输出</span></span><br><span class="line"><span class="comment">         * %x或%X表示以十六进制输出</span></span><br><span class="line"><span class="comment">         * %o表示以八进制输出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://pic.imgdb.cn/item/65a8a212871b83018a521c40.png" class="nofancybox" /><h3 id="9-常量在C语言中如何表示"><a href="#9-常量在C语言中如何表示" class="headerlink" title="9.常量在C语言中如何表示"></a>9.常量在C语言中如何表示</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>&ensp;&emsp;整数<br>&ensp;&emsp;&ensp;&emsp;十进制：传统的写法<br>&ensp;&emsp;&ensp;&emsp;十六进制：前面加0x或0X<br>&ensp;&emsp;&ensp;&emsp;八进制：前面0  注意是数字零不是字母o</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>&ensp;&emsp;传统的写法<br>&ensp;&emsp;&ensp;&emsp;float x &#x3D; 3.2;  &#x2F;&#x2F;传统<br>&ensp;&emsp;科学计数法<br>&ensp;&emsp;&ensp;&emsp;float x &#x3D; 3.2e3;  &#x2F;&#x2F;x的值是 3200<br>&ensp;&emsp;&ensp;&emsp;float x &#x3D; 123.45e-2;  &#x2F;&#x2F;x的值是1.2345</p><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>&ensp;&emsp;单个字符用单引号括起来<br>&ensp;&emsp;&ensp;&emsp;’A’ 表示字符A<br>&ensp;&emsp;字符串用双引号括起来<br>&ensp;&emsp;&ensp;&emsp;”AB” 表示字符串AB<br>&ensp;&emsp;&ensp;&emsp;”A” 正确，因为”A”表示’A’ ‘\0’ 的组合</p><h3 id="10-常量以什么样的二进制代码存储在计算机中"><a href="#10-常量以什么样的二进制代码存储在计算机中" class="headerlink" title="10.常量以什么样的二进制代码存储在计算机中"></a>10.常量以什么样的二进制代码存储在计算机中</h3><p>&ensp;&emsp;整数是以补码的形式转化为二进制代码存储在计算机中<br>&ensp;&emsp;实数是以IEEE754标准转化为二进制代码存储在计算机中<br>&ensp;&emsp;&ensp;&emsp;具体可参见末尾的 穿插在课堂中的零散知识笔记<br>&ensp;&emsp;字符的本质实际也是与整数的存储方式相同</p><h3 id="11-代码规范化"><a href="#11-代码规范化" class="headerlink" title="11.代码规范化"></a>11.代码规范化</h3><h3 id="12-什么是字节"><a href="#12-什么是字节" class="headerlink" title="12.什么是字节"></a>12.什么是字节</h3><p>&ensp;&emsp;字节就是存储数据的单位，并且是硬件所能访问的最小单位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>字节 = <span class="number">8</span>位</span><br><span class="line"><span class="number">1</span>K = <span class="number">1024</span>字节</span><br><span class="line"><span class="number">1</span>M = <span class="number">1024</span>K</span><br><span class="line"><span class="number">1</span>G = <span class="number">1024</span>M</span><br></pre></td></tr></table></figure><h3 id="13-不同类型数据之间相互赋值的问题"><a href="#13-不同类型数据之间相互赋值的问题" class="headerlink" title="13.不同类型数据之间相互赋值的问题"></a>13.不同类型数据之间相互赋值的问题</h3><h3 id="14-什么是ASCII"><a href="#14-什么是ASCII" class="headerlink" title="14.什么是ASCII"></a>14.什么是ASCII</h3><p>&ensp;&emsp;ASCII不是一个值，而是一种规定<br>&ensp;&emsp;ASCII规定了不同的字符是使用哪个整数值去表示<br>&ensp;&emsp;它规定了：<br>&ensp;&emsp;&ensp;&emsp;’A’ — 65<br>&ensp;&emsp;&ensp;&emsp;’B’ — 66<br>&ensp;&emsp;&ensp;&emsp;’a’ — 97<br>&ensp;&emsp;&ensp;&emsp;’b’ — 98<br>&ensp;&emsp;&ensp;&emsp;’0’ — 48</p><h3 id="15-字符的存储【字符本质上与整数的存储方式相同】"><a href="#15-字符的存储【字符本质上与整数的存储方式相同】" class="headerlink" title="15.字符的存储【字符本质上与整数的存储方式相同】"></a>15.字符的存储【字符本质上与整数的存储方式相同】</h3><p>&ensp;&emsp;基本的输入输出函数的用法 – <code>printf</code> 和 <code>scanf</code><br>&ensp;&emsp;&ensp;&emsp;<code>printf()</code>  - 将变量的内容输出到显示器上<br>&ensp;&emsp;&ensp;&emsp;<code>scanf()</code> - 通过键盘将数据输入到变量中</p><h4 id="printf-用法："><a href="#printf-用法：" class="headerlink" title="printf() 用法："></a>printf() 用法：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">printf</span>(<span class="string">&quot;字符串\n&quot;</span>);  <span class="comment">//\n表示换行</span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">printf</span>(<span class="string">&quot;输出控制符&quot;</span>, 输出参数);</span><br><span class="line"><span class="number">3.</span> <span class="built_in">printf</span>(<span class="string">&quot;输出控制符1 输出控制符2.......&quot;</span>, 输出参数<span class="number">1</span>, 输出参数<span class="number">2</span>, ......);</span><br><span class="line">       输出控制符和输出参数的个数必须一一对应</span><br><span class="line"><span class="number">4.</span> <span class="built_in">printf</span>(<span class="string">&quot;输出控制符 非输出控制符&quot;</span>, 输出参数);</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;输出控制符包含如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%d</span><br><span class="line">%ld</span><br><span class="line">%c</span><br><span class="line">%f</span><br><span class="line">%lf</span><br><span class="line">%x <span class="comment">//（或者%X或者%#X）</span></span><br><span class="line">%o</span><br><span class="line">%s</span><br></pre></td></tr></table></figure><h4 id="为什么需要输出控制符"><a href="#为什么需要输出控制符" class="headerlink" title="为什么需要输出控制符"></a>为什么需要输出控制符</h4><p>&ensp;&emsp;01组成的代码可以表示数据也可以表示指令<br>&ensp;&emsp;如果01组成的代码表示的是数据的话，那么同样的的01代码组合以不同的输出格式输出就会有不同的输出结果</p><h4 id="scanf-用法："><a href="#scanf-用法：" class="headerlink" title="scanf() 用法："></a>scanf() 用法：</h4><p>&ensp;&emsp;用法一：scanf(“输入控制符”，输入函数)；<br>&ensp;&emsp;功能：将从键盘输入的字符转化为输入控制符所规定的数据，然后存入以输入参数的值为地址的变量中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f);  <span class="comment">//&amp;i 表示i的地址 &amp;是一个取地址符</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;用法二：scanf(“非输入控制符 输入控制符”, 输入参数);<br>&ensp;&emsp;功能：将从键盘输入的字符转化为输入控制符所规定的数据，然后存入以输入参数的值为地址的变量中（非输入控制符必须原样输入</p><h4 id="如何使用scanf编写出高质量代码"><a href="#如何使用scanf编写出高质量代码" class="headerlink" title="如何使用scanf编写出高质量代码"></a>如何使用scanf编写出高质量代码</h4><p>&ensp;&emsp;1. 使用scanf之前最好先使用printf提示用户以什么样的方式来输入<br>&ensp;&emsp;2. scanf中尽量不要使用非输入控制符，尤其是不要用 \n<br>&ensp;&emsp;3. 应该编写代码对用户的非法输入做适当的处理【非重点】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p><code>+</code>加  <code>-</code>减  <code>*</code>乘  <code>/</code>除  <code>%</code>取余数</p><p>&ensp;&emsp;除法与取模运算符<br>&ensp;&emsp;除法<code>/</code>的运算结果和运算对象的数据类型有关，两个数都是int，则商就是int，若商有小数，则截取小数部分；被除数和除数中只要有一个或两个都是浮点型数据，则商也是浮点型，不截取小数部分。<br>&ensp;&emsp;如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>/<span class="number">5</span> == <span class="number">3</span>      <span class="number">16</span>/<span class="number">5.0</span>  ==  <span class="number">3.20000</span>      <span class="number">-13</span>/<span class="number">4</span> == <span class="number">-4</span></span><br><span class="line"><span class="number">-13</span>/<span class="number">-3</span> == <span class="number">4</span>      <span class="number">3</span>/<span class="number">5</span> == <span class="number">0</span>      <span class="number">5</span>/<span class="number">3</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>&ensp;&emsp;最典型的例题就是求 <code>s=1+1/2+1/3+1/4+1/5+1...+1/100</code>的值<br>&ensp;&emsp;取余<code>%</code>的运算对象必须是整数，结果是整除后的余数，其余数的符号与被除数相同<br>&ensp;&emsp;如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>%<span class="number">3</span> == <span class="number">1</span>      <span class="number">13</span>%<span class="number">-3</span> == <span class="number">1</span>     <span class="number">-13</span>%<span class="number">3</span> == <span class="number">-1</span></span><br><span class="line"><span class="number">-13</span>%<span class="number">23</span> == <span class="number">-13</span>      <span class="number">3</span>%<span class="number">5</span> == <span class="number">3</span></span><br></pre></td></tr></table></figure><p>&ensp;&emsp;取余%的运算对象必须是整数，结果是整除后的余数，其余数的符号与被除数相同<br>&ensp;&emsp;如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>%<span class="number">3</span> == <span class="number">1</span>      <span class="number">13</span>%<span class="number">-3</span> == <span class="number">1</span>     <span class="number">-13</span>%<span class="number">3</span> == <span class="number">-1</span></span><br><span class="line"><span class="number">-13</span>%<span class="number">23</span> == <span class="number">-13</span>      <span class="number">3</span>%<span class="number">5</span> == <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;=  &lt;  &lt;=  !=(不等于)  ==(等于)</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!(非)  &amp;&amp;（并且）  ||(或)</span><br></pre></td></tr></table></figure><p>!真  →  假<br>!假  →  真</p><p>真&amp;&amp;真  →  真<br>真&amp;&amp;假  →  假<br>假&amp;&amp;真  →  假<br>假&amp;&amp;假  →  假</p><p>真||假  →  真<br>假||真  →  真<br>真||真  →  真<br>假||假  →  假</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言概述&quot;&gt;&lt;a href=&quot;#C语言概述&quot; class=&quot;headerlink&quot; title=&quot;C语言概述&quot;&gt;&lt;/a&gt;C语言概述&lt;/h1&gt;&lt;h2 id=&quot;为什么学习C语言&quot;&gt;&lt;a href=&quot;#为什么学习C语言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.3：求抽象函数的定义域</title>
    <link href="http://example.com/2023/09/14/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-3%EF%BC%9A%E6%B1%82%E6%8A%BD%E8%B1%A1%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%9F%9F/"/>
    <id>http://example.com/2023/09/14/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-3%EF%BC%9A%E6%B1%82%E6%8A%BD%E8%B1%A1%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%9F%9F/</id>
    <published>2023-09-14T04:59:49.000Z</published>
    <updated>2023-09-14T04:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>抽象函数：不知道函数的具体表达式 如：f(x),g(x)</p><span id="more"></span><p><span style='color:white;background:black;font-size:17px;font-family:仿宋;'>题型：已知 $f(\square )$ 的定义域，求 $f(\triangle )$ 中 $x$ 的范围（定义域）</span></p><p>&ensp;&emsp;解法：两函数对应法则一样，则各自括号内范围应该相同。<br>&ensp;&emsp;即：若 $a\leqslant \square \leqslant b$ ，则可得 $a\leqslant \triangle \leqslant b$ 进而求出 $x$</p><p><span style='color:white;background:black;font-size:17px;font-family:仿宋;'>eg：$f(x)$ 中 $x\in [-1,3)$ ,则 $f(x+2)$的定义域：____  </span><br>&ensp;&emsp;解：$\because $  $f(x)$ 中 $-1\leqslant x&lt; 3$ <br><br>&ensp;&emsp;&ensp;&emsp;&ensp;$\therefore$ $f(x+2)$ 中 $-1\leqslant x+2&lt; 3$, $\Rightarrow $ $-3\leqslant x&lt; 1$ <br><br>&ensp;&emsp;&ensp;&emsp;&ensp;$\therefore$ $x\in [-3,1)$</p><p><span style='color:white;background:black;font-size:17px;font-family:仿宋;'>eg：(2013-3). $f(2-4x)$ 中 $x\in [-1,3)$ 则 $f(x)$ 的定义域：____</span><br>&ensp;&emsp; 解：$\because $ $f(2-4x)$ 中，$-1\leq x&lt; 3$ </p><p>&ensp;&emsp;&ensp;&emsp;&ensp;$\therefore$ $-10&lt; 2-4x\leq 6$ <br><br>&ensp;&emsp;&ensp;&emsp;&ensp;$\therefore$ $f(x)$ 中 $-10&lt; x\leq 6$ <br><br>&ensp;&emsp;&ensp;&emsp;&ensp;$\therefore$ $x\in (-10,6]$ <br></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;抽象函数：不知道函数的具体表达式 如：f(x),g(x)&lt;/p&gt;</summary>
    
    
    
    <category term="高数" scheme="http://example.com/categories/%E9%AB%98%E6%95%B0/"/>
    
    
    <category term="高数" scheme="http://example.com/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>2.1：分支结构</title>
    <link href="http://example.com/2023/08/28/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2-1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2023/08/28/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2-1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</id>
    <published>2023-08-28T12:57:37.000Z</published>
    <updated>2023-08-28T12:57:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前所有的例子都是遵循最简单的程序设计结构——顺序结构</p><span id="more"></span><p>&ensp;&emsp;目前所有的例子都是遵循最简单的程序设计结构——顺序结构，也就是所谓的“一条路走到黑”，<b><span style="color:#f0768b;">程序所做的事情就是从上到下依次执行每一条语句</span></b>。<br>&ensp;&emsp;但现实中，我们的程序常常需要进行判断和选择。比如，判断用户的年龄是否满18周岁？判断用户的性别是否为女生？判断用户输入的年份是否为闰年？这些都是需要让程序进行判断和选择的，称为<b><span style="color:#f0768b;">分支结构程序设计</span></b></p><h2 id="2-1-1-关系运算符"><a href="#2-1-1-关系运算符" class="headerlink" title="2.1.1 关系运算符"></a>2.1.1 关系运算符</h2><p>在C语言中，使用关系运算符来比较两个数的大小关系，如图2-1所示<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/1.png"></p><p>&ensp;&emsp;关系运算符都是双目运算符，其结合性均为从左到右。<br>&ensp;&emsp;值得注意的是，关系运算符的优先级低于算术运算符，高于赋值运算符。另外，图2-1中的这6个关系运算符，<code>&lt;、&lt;=、&gt;、&gt;=</code>的优先级相同，高于<code>==</code>和<code>!=</code>（<code>==</code>和<code>!=</code>的优先级相同）</p><h2 id="2-1-2-关系表达式"><a href="#2-1-2-关系表达式" class="headerlink" title="2.1.2 关系表达式"></a>2.1.2 关系表达式</h2><p>&ensp;&emsp;使用关系运算符将两边的变量、数据或表达式连接起来，称为<b><span style="color:#f0768b;">关系表达式</span></b>。下面是一些关系表达式的例子：</p><ul><li><code>1&lt;2</code></li><li><code>a&gt;b</code></li><li><code>a&lt;=1+b</code></li><li><code>&#39;a&#39;+&#39;b&#39;&lt;=&#39;c&#39;</code></li><li><code>(a=3)&gt;(b=5)</code></li></ul><p>&ensp;&emsp;关系表达式得到的值是一个逻辑值，即判断结果为“真”或“假”，关系表达式的值为<code>0</code>.<br>&ensp;&emsp;下面两个例子：</p><ul><li>关系表达式<code>1&lt;2</code>的值为真，所以该关系表达式的值为<code>1</code></li><li>关系表达式<code>&#39;a&#39;+&#39;b&#39;&lt;=&#39;c&#39;</code>，因为字符<code>&#39;a&#39;、&#39;b&#39;、&#39;c&#39;</code>对应的<code>ASCII</code>码分别是<code>97、98、99</code>，值为假，所以该表达式的值为<code>0</code>.</li></ul><p>&ensp;&emsp;即<code>97+98&lt;=99</code>，值为假，所以该表达式的值为<code>0</code><br>&ensp;&emsp;请看下面例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &gt; b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &lt;= <span class="number">1</span> + b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span> &lt;= <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (a = <span class="number">3</span>) &gt; (b = <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/3.png"></p><h2 id="2-1-3-逻辑运算符"><a href="#2-1-3-逻辑运算符" class="headerlink" title="2.1.3 逻辑运算符"></a>2.1.3 逻辑运算符</h2><p>&ensp;&emsp;关系运算符获得的一个逻辑值，逻辑值只有“真”或“假”，没有什么“可能”“也许”“大概”等模棱两可的东西。<br>&ensp;&emsp;在C语言中，<b><span style="color:#6a5acd;">如果需要同时对两个或两个以上的关系表达式进行判断，那么就需要用到逻辑运算符</span></b>。<br>&ensp;&emsp;比如，一个程序限定条件只能由年满18周岁的女生使用，那么用户想要使用这个程序就必须满足以下两个条件：</p><ul><li>年满18周岁；</li><li>女性；</li></ul><p>&ensp;&emsp;C语言提供了三种逻辑运算符，见表2-1<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/4.png"></p><p>&ensp;&emsp;注意：逻辑运算符的优先级是不一样的，作为单目运算符的逻辑非（<code>!</code>）优先级最高，接下来是逻辑与（<code>&amp;&amp;</code>），最后才是逻辑或（<code>||</code>）</p><h2 id="2-1-4-逻辑表达式"><a href="#2-1-4-逻辑表达式" class="headerlink" title="2.1.4 逻辑表达式"></a>2.1.4 逻辑表达式</h2><p>&ensp;&emsp;用逻辑运算符将两边的变量、数据或表达式连接起来，称为逻辑表达式，下面是一些逻辑表达式的例子：</p><ul><li><code>3 &gt; 1 &amp;&amp; 1 &lt; 2</code></li><li><code>3 + 1 || 2 == 0</code></li><li><code>!(a+b)</code></li><li><code>!0 + 1 &lt; 1 || !(3 + 4)</code></li><li><code>&#39;a&#39; - &#39;b&#39; &amp;&amp; &#39;c&#39;</code></li></ul><p>1）<code>3 &gt; 1 &amp;&amp; 1 &lt; 2</code><br>&ensp;&emsp;由于关系运算符的优先级比逻辑运算符高，所以先运算两个关系运算符，变成 <code>1 &amp;&amp; 1</code>，结果为 <code>1</code>.<br>2）<code>3 + 1 || 2 == 0</code><br>&ensp;&emsp;有的朋友看到这里就懵了！不是说逻辑运算符的左右两边只能是逻辑值吗？逻辑值不是只能是真或假，用<code>1</code>和<code>0</code>来表示吗？<br>&ensp;&emsp;其实是这样的，关系表达式和逻辑表达式得到的值都是一个逻辑值，也就是表示真的<code>1</code>和表示假的<code>0</code>。但是当判断一个值得逻辑值的时候，以<code>0</code>表示假，以任何非<code>0</code>的数表示真。一个是编译系统告诉我们的结果，一个是让编译系统去判断，两者方向不同。因此<code>3+1=4</code>，为非<code>0</code>值，所以逻辑或的左边为真，右边<code>2==0</code>明显是不成立的，右边为假，但对于逻辑或来说，只要存在一个为真，结果就为真。<br>3）<code>!(a+b)</code><br>&ensp;&emsp;这里有个小括号，根据优先级规则先计算小括号里面的内容。也就是将变量<code>a</code>的值和变量<code>b</code>的值相加，如果他们的和为<code>0</code>，那么逻辑非的结果就是真；如果它们的和不为<code>0</code>，那么逻辑非的结果则是假。<br>4）<code>!0 + 1 &lt; 1 || !(3 + 4)</code><br>&ensp;&emsp;<code>0</code>的逻辑非结果为真，也就是<code>1</code>，<code>1 + 1 &lt; 1 </code>明显是不成立的，所以逻辑或的左边为假，右边 <code>3 + 4</code> 的值是<code>7</code>，非<code>0</code>，所以逻辑非的结果是假。逻辑或的左右两边均为假，则结果为假。<br>5）<code>&#39;a&#39; - &#39;b&#39; &amp;&amp; &#39;c&#39;</code><br>&ensp;&emsp;在编译器的“眼中”所有的字符对应的都是<code>ASCII</code>码，因为字符<code>&#39;a&#39;、&#39;b&#39;、&#39;c&#39;</code>对应的<code>ASCII</code>码分别是<code>97、98、99</code>，所以逻辑与左边<code>97-98</code>的值为非<code>0</code>，表示真，右边<code>99</code>也是非<code>0</code>，也表示真，因此结果为真。<br>&ensp;&emsp;下面用程序验证上述结论：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">3</span> &gt; <span class="number">1</span> &amp;&amp; <span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">3</span> + <span class="number">1</span> || <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !(a + b));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !<span class="number">0</span> + <span class="number">1</span> &lt; <span class="number">1</span> || !(<span class="number">3</span> + <span class="number">4</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;b&#x27;</span> &amp;&amp; <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/5.png"></p><h2 id="2-1-5-短路求值"><a href="#2-1-5-短路求值" class="headerlink" title="2.1.5 短路求值"></a>2.1.5 短路求值</h2><p>&ensp;&emsp;短路求值（short-circuit evaluation）又称最小化求值，是一种逻辑运算符的求值策略。<br>&ensp;&emsp;运算符的求值策略。只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        (a = <span class="number">0</span>) &amp;&amp; (b = <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">        (a = <span class="number">1</span>) || (b = <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/6.png"></p><p>&ensp;&emsp;第一个逻辑表达式：因为<code>a</code>先被赋值为<code>0</code>，则逻辑与左边为假，所以根据短路求值的原则，右边无须再进行计算（<code>b</code>变量的值没有被改变），直接得到该逻辑表达式的值为假，也就是<code>0</code>。<br>&ensp;&emsp;第二个逻辑表达式：因为<code>a</code>先被赋值为<code>1</code>，则逻辑或左边为真，所以根据短路求值的原则，右边无须再进行计算（<code>b</code>变量的值没有被改变），直接得到逻辑表达式的值为真，也就是<code>1</code>。</p><h2 id="2-1-6-if语句"><a href="#2-1-6-if语句" class="headerlink" title="2.1.6 if语句"></a>2.1.6 if语句</h2><p>&ensp;&emsp;分支结构的作用就是让C语言的代码根据条件执行不同的语句或程序块，但光有关系表达式和逻辑表达式还不足以实现，实现分支结构还需要学习一个新的语句——<code>if语句</code>。<br>&ensp;&emsp;if语句的实现有三种形式：</p><h3 id="1-第一种"><a href="#1-第一种" class="headerlink" title="1.第一种"></a>1.第一种</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式)</span><br><span class="line">&#123;</span><br><span class="line">    … <span class="comment">//逻辑值为真所执行的语句、程序块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;第一种<code>if语句</code>最简单的，if后边小括号内填写返回逻辑值的表达式，当然也可以直接填入一个逻辑值，当填入的这个值为非<code>0</code>的时候，编译系统会认为这个逻辑值是真；只有当填入<code>0</code>的时候，才被认为是假。<br>&ensp;&emsp;下面例子演示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您老贵更：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;进门左拐！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/7.png"></p><p>&ensp;&emsp;程序运行后，如果输入的值大于等于<code>18</code>，即if后边小括号内的表达式的值为<code>真</code>，那么执行<code>if语句</code>的内容；如果输入的值是<code>16</code>，即表达式的值为<code>假</code>，if语句的内容则不被执行。<br>&ensp;&emsp;上面例子中属于<code>if语句</code>的内容是用大括号括起来的，并且做了缩紧。但是乐于尝试就可能会发现下面代码也同样可执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您老贵庚：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">18</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;进门左拐！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/8.png"></p><p>&ensp;&emsp;上面的代码可以正常执行，是因为C语言不会强制要求代码一定要写的很规范，但是适当的缩进可以让我们的代码一目了然。<br>&ensp;&emsp;在C语言中，使用分号（<code>;</code>）结束一个语句。在表达式后边接一个分号，就变成了一个完整的C语言语句。如果使用大括号将几个语句包括起来，那么这几个语句就构成了程序块。一个程序块在编译系统看来，就是一个整体。<br>&ensp;&emsp;那么什么时候需要将几个语句变成一个整体呢？<br>&ensp;&emsp;比如，希望<code>if</code>后边的表达式为<code>真</code>的时候，执行几个语句，那么就需要用大括号将它们包括起来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您老贵庚：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;进门左拐！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;balabalabala\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/9.png"></p><p><b><span style="color:#f0768b;">第一种if语句表达出来的意思是“如果条件成立，就……”。</span></b></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>接下来是第二种if语句，它表达出来的意思是<b><span style="color:#f0768b;">“如果条件成立，就……；否则就……”。</span></b></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式)</span><br><span class="line">&#123;</span><br><span class="line">    … <span class="comment">//逻辑值为真所执行的语句、程序块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    … <span class="comment">//逻辑值为假所执行的语句、程序块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;请看下面例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您老贵庚：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;进门左拐！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;慢走不送！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/10.png"></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>&ensp;&emsp;<code>if语句</code>形式允许扩充各种条件的判断，语法格式是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;···&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>) &#123;···&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;···&#125;</span><br><span class="line">  …</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (表达式n) &#123;···&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;···&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;下面这个小程序实现的功能是按成绩评级：</p><ul><li>90分及以上：A</li><li>80~89分：B</li><li>70～70分：C</li><li>60～69分：D</li><li>低于60分：E</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;請輸入成績：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">90</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;A\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">80</span> &amp;&amp; i &lt; <span class="number">90</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;B\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">70</span> &amp;&amp; i &lt; <span class="number">80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;C\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">60</span> &amp;&amp; i &lt; <span class="number">70</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;D\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;E\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/11.png"></p><h2 id="2-1-7-switch-语句"><a href="#2-1-7-switch-语句" class="headerlink" title="2.1.7 switch 语句"></a>2.1.7 switch 语句</h2><p>&ensp;&emsp;C语言还提供了另外一种多分支选择的语句——<code>switch语句</code>，语法格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>：语句或程序块</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>：语句或程序块</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n：语句或程序块</span><br><span class="line">    <span class="keyword">default</span>:语句或程序块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;这里每个<code>case</code>后边的常量是匹配<code>switch</code>后边表达式的值，如果表达式计算出来的值与常量表达式2的值相等，那么直接跳到<code>case</code> 常量表达式2的位置开始执行，如果上边所有的<code>case</code>均没有匹配，那么就执行<code>default</code>后面的内容。但是<code>default</code>是可选的，如果没有<code>default</code>，并且上边所有的<code>case</code>均不匹配，那么<code>switch</code>语句不执行任何动作。<br>&ensp;&emsp;从语法结构上来看，<code>switch语句</code>比<code>if-else-if</code>更为简洁。现在尝试使用<code>switch</code>语句代替<code>if-else-if</code>语句，写一个通过评级反推出分数范围的程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;請輸入成績：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在90分以上！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在80~89分！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在70~79分！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在60~69分！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在60分以下！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;請輸入有效的成績評級！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/12.png"></p><p>&ensp;&emsp;这并不是我们想要的结果，那么问题出现在哪里呢<br>&ensp;&emsp;问题就出在C语言并没有我们想象的那么“智能”，这些<code>case</code>和<code>default</code>，它们事实上都是“标签”，用来标志一个位置而已。<code>switch</code>跳到某个位置之后，就会一直往下执行，所以这里还需要配合一个<code>break语句</code>，让代码在适当的位置跳出<code>switch语句</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>：语句或程序块; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>：语句或程序块; <span class="keyword">break</span>;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n：语句或程序块; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:语句或程序块n+<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;当程序执行到<code>break语句</code>的时候就不会再继续往下走了，它会跳出<code>switch语句</code>并开始执行下一条语句。将代码修改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;請輸入成績：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在90分以上！\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在80~89分！\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在70~79分！\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在60~69分！\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;您的成績在60分以下！\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;請輸入有效的成績評級！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/13.png"></p><h2 id="2-1-8-分支结构的嵌套"><a href="#2-1-8-分支结构的嵌套" class="headerlink" title="2.1.8 分支结构的嵌套"></a>2.1.8 分支结构的嵌套</h2><p>&ensp;&emsp;如果在一个if语句中包含另一个if语句，就称为if语句的嵌套，也叫做分支结构的嵌套，如图2-3所示。<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/14.png"></p><p>&ensp;&emsp;下面根据图2-4所示的流程图编写代码<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/15.png"></p><p>流程图是算法、工作流或流程的一种框图表示，它以不同类型的框代表不同种类的步骤，每两个步骤之间以箭头连接。这种表示方法便于说明解决已知问题的方法，广泛应用于分析、设计、记录及操控许多领域的流程或程序。</p><p>&ensp;&emsp;程序代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;請輸入來兩個數字：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a != b)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d &gt; %d\n&quot;</span>, a, b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d &lt; %d\n&quot;</span>, a, b);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d = %d\n&quot;</span>, a, b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/16.png"></p><h2 id="2-1-9-悬挂-else"><a href="#2-1-9-悬挂-else" class="headerlink" title="2.1.9  悬挂 else"></a>2.1.9  悬挂 else</h2><p>&ensp;&emsp;何为<code>悬挂else</code>。比如，你计划约同学周末一起去看电影，接下来就有两个问题了：第一，同学那天有没有空；第二，天气是否下雨。但主要还是看问题一，只要同学有空，下雨可以带伞。<br>&ensp;&emsp;写成代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> isRain, isFree;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否有空？（Y/N）&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isFree);</span><br><span class="line"></span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否下雨？（Y/N）&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isRain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isFree == <span class="string">&#x27;Y&#x27;</span> || isFree == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isRain == <span class="string">&#x27;Y&#x27;</span> || isRain == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;記得帶傘！\n&quot;</span>);</span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;同學沒空！\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/17.png"></p><p>&ensp;&emsp;这样看上去似乎没什么问题，但如果这样输入：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/18.png"></p><p>&ensp;&emsp;这里同学处于有空状态但是居然输出“同学没空！”，这是为什么呢？<br>&ensp;&emsp;分析代码：这段代码本意应该有两种情况，同学有空或没空。对于同学有空的情况，如果天下雨，就提醒带伞；对于同学没空的情况，就很遗憾了。然而，这段代码实际上所做的并非如此，原因在于C语言中有这样的规则：<code>else</code>始终与最接近的<code>if</code>匹配，所以都被程序的缩紧骗了，事实上编译器看到程序的代码是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (isFree == <span class="string">&#x27;Y&#x27;</span> || isFree == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (isRain == <span class="string">&#x27;Y&#x27;</span> || isRain == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;及的帶傘！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">&quot;同學沒空！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;解决方法很简单，加上一个大括号（<code>&#123;&#125;</code>）即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (isFree == <span class="string">&#x27;Y&#x27;</span> || isFree == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (isRain == <span class="string">&#x27;Y&#x27;</span> || isRain == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;及的帶傘！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;同學沒空！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;所以，最好的习惯就是<code>if-else</code>语句后面，无论是一个还是多个语句，都使用大括号把他们括起来，只要养成这样的习惯，就可以防止发生类似<code>悬挂else</code>这样的问题。<br>&ensp;&emsp;代码像下面这样写会更好些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> isRain, isFree;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否有空？（Y/N）&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isFree);</span><br><span class="line"></span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否下雨？（Y/N）&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isRain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isFree == <span class="string">&#x27;Y&#x27;</span> || isFree == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        &#123;       </span><br><span class="line">                <span class="keyword">if</span> (isRain == <span class="string">&#x27;Y&#x27;</span> || isRain == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;及的帶傘！\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;同學沒空！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;无论是哪种写法，选择后都要坚持一直使用它，不要换来换去，不然自己写的代码过段时间自己看着都别扭。</p><h2 id="2-1-10-等于号带来的问题"><a href="#2-1-10-等于号带来的问题" class="headerlink" title="2.1.10 等于号带来的问题"></a>2.1.10 等于号带来的问题</h2><p>&ensp;&emsp;分支结构的代码容易陷入另一个陷阱，那就是等于号带来的问题。作为条件的关系表达式中，经常需要判断一个值是否与另一个值相等。继续刚才的故事，比如看完电影，你就要判断同学是否需要回家了，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;       </span><br><span class="line">        <span class="type">char</span> hasBF;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否回家？&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;hasBF);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasBF = <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;送他回家\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;那就去玩！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>&ensp;&emsp;正当同学对你say no （<code>N</code>）的时候，程序打印出来的却是：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.1%EF%BC%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/19.png"></p><p>&ensp;&emsp;问题出在等于号（<code>=</code>），<code>if (hasBF = &#39;Y&#39;)</code>本意是判断<code>hasBF</code>变量的值是否等于<code>&#39;Y&#39;</code>，结果由于少写了一个等于号，就变成了赋值表达式。所以无论<code>hasBF</code>里边存放的值是什么，在这里都被赋值为<code>&#39;Y&#39;</code>。<br>&ensp;&emsp;如果代码变得庞大，那么从奇怪的结果中要反推出问题所在，就变得异常困难。<br>&ensp;&emsp;解决办法：只需要将两个操作数调一下位置即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;Y&#x27;</span> == hasBF)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;送他回家\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;那就去玩！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;将值写在表达式的左边，将变量写在表达式的右边。这样做的好处是让编译器帮你做检查。因为如果少录入一个等于号，“<code>&#39;Y&#39; = hasBF</code>”这个表达式是不成立的，因为编译器永远不会允许给一个常量赋值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前所有的例子都是遵循最简单的程序设计结构——顺序结构&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.17：运算符</title>
    <link href="http://example.com/2023/08/27/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2023/08/27/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2023-08-27T03:50:00.000Z</published>
    <updated>2023-08-27T03:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>几乎每一个有意义的程序都需要进行计算，写代码设计程序，就是为了告诉计算机如何对数据进行加工处理，最后得出想要的结果。</p><span id="more"></span><hr><p>&ensp;&emsp;几乎每一个有意义的程序都需要进行计算，写代码设计程序，就是为了告诉计算机如何对数据进行加工处理，最后得出想要的结果。<br>&ensp;&emsp;C语言通过提供大量的运算符来支持我们对数据进行处理<br>&ensp;&emsp;前边将一个值存放到变量中，使用的是赋值运算符，就是<b><span style="color:#f0768b;">等号（&#x3D;）</span></b>。<br>&ensp;&emsp;对字符串中的某个字符进行索引，则是将<b><span style="color:#f0768b;">方括号（[]）</span></b>作为下标运算符来实现。 </p><h2 id="1-17-1-算术运算符"><a href="#1-17-1-算术运算符" class="headerlink" title="1.17.1 算术运算符"></a>1.17.1 算术运算符</h2><p>&ensp;&emsp;C语言支持的算术运算符见表1-6<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/1.png"></p><p>&ensp;&emsp;这里有以下几点需要注意：</p><ul><li>因为键盘上没有乘号和除号两个按键，所以用<b><span style="color:#f0768b;">星号（*）</span></b>和<b><span style="color:#f0768b;">斜杠（&#x2F;）</span></b>代替</li><li>对于整数间的除法采取<b><span style="color:#f0768b;">直接舍弃小数部分</span></b>的方式，而不是四舍五入</li><li>对于浮点数间的除法则能获得一个相对逼近结果的值（如果除不尽或位数特别多的话）</li><li>百分号（%）表示求余数的意思，但求余运算符要求两边的操作数都要是整数，其结果也是整数</li></ul><h2 id="1-17-2-目"><a href="#1-17-2-目" class="headerlink" title="1.17.2 目"></a>1.17.2 目</h2><p>&ensp;&emsp;表1-6中有些运算符后边写“双目”，有些写“单目”，那么“目”的意思是什么？<br>&ensp;&emsp;我们把<b><span style="color:#a70e85;">被运算符作用的运算对象成为操作数</span></b>，如<code>1+2</code>，那么1和2就是<b><span style="color:#f0768b;">被加法运算符（+）作用的两个操作数</span></b><br><b><span style="color:#a70e85;">一个运算符是双目运算符还是单目运算符，就看它有多少个操作数。</span></b>加号（+）作为加法运算符使用的时候，它有两个操作数，称为双目运算符；但是，表示正号（+）的时候，他只有一个操作数，称为单目运算符</p><p>&ensp;&emsp;C语言除了单目运算符、双目运算符，还有唯一的一个三目运算符，就是有三个操作数（后面有说）</p><h2 id="1-17-3-表达式"><a href="#1-17-3-表达式" class="headerlink" title="1.17.3 表达式"></a>1.17.3 表达式</h2><p>&ensp;&emsp;用运算符和括号将操作数连接起来的式子，称为<b><span style="color:#f0768b;">表达式</span></b>，下面是几个表达式的例子：</p><ol><li><code>1+1</code> </li><li><code>&#39;a&#39;+&#39;b&#39;</code> </li><li><code>a+b</code> </li><li><code>a+&#39;b&#39;+pow(a,b)*3/4+5</code></li></ol><p>&ensp;&emsp;表达式可以很简单（像<code>1+1</code>），也可以很复杂（像<code>a+&#39;b&#39;+pow(a,b)*3/4+5</code>）。那么涉及复杂的表达式，就需要讨论计算的先后顺序。<br>&ensp;&emsp;对于算术运算符构成的表达式，只需要用到小学的数学知识就足够了——<b><span style="color:#f0768b;">先乘除，后加减</span></b>。但<b><span style="color:#a70e85;">如果一个表达式内，存在多种不同的运算符，就需要考虑到运算符的优先级和结合性的问题</span></b>。</p><h2 id="1-17-4-运算符的优先级和结合性"><a href="#1-17-4-运算符的优先级和结合性" class="headerlink" title="1.17.4 运算符的优先级和结合性"></a>1.17.4 运算符的优先级和结合性</h2><p>&ensp;&emsp;表1-7列举了C语言所有运算符的优先级和结合性。<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/2.png"></p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/3.png"></p><p>优先级和结合性共同决定了在同一表达式中运算的先后顺序</p><p>&ensp;&emsp;表1-7中优先级的数字越小，说明其优先级越高。表示正、负号运算符的优先级要高于加、减、乘、除和求余运算符，赋值运算符的优先级则要低于算术运算符。 <br><br>&ensp;&emsp;请看下面例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line">        i = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">        j = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>;</span><br><span class="line">        k = i +j + <span class="number">-1</span> + <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;k = %d\n&quot;</span>, k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/4.png"></p><p>&ensp;&emsp;代码分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span> + <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;这是一个完整的语句，用分号（<code>；</code>）表示语句结束。<br>&ensp;&emsp;其中有两个运算符，分别是赋值运算符（&#x3D;）和加号运算符（+）<br>&ensp;&emsp;由于赋值运算符的优先级要比算术运算符低，因此先将1和2两个操作数相加，再将其结果赋值给变量<code>i</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;同样道理，<b><span style="color:#f0768b;">乘号运算符（*）</span></b>的优先级高于<b><span style="color:#f0768b;">加号运算符（+）</span></b>，于是先计算<code>2*3</code>的值，再与1相加，最后才赋值给变量<code>j</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k = i +j + <span class="number">-1</span> + <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;经过上面两个语句的计算，变量i和j的值是3和7；负号运算符的优先级大于加号运算符，并且结合性是“右向左”，所以得到的值是<code>-1</code>；</p><p>&ensp;&emsp;最后还有一个函数，<b><span style="color:#a70e85;">函数的作用就是帮我们实现一个功能</span></b>，如<code>printf</code>函数用于打印格式化字符串而这里<code>pow</code>函数则是计算2的3次方，然后将结果返回。这里可以直接将<code>pow(2,3)</code>看成是它返回的结果，也就是8<br>&ensp;&emsp;所以整个表达式就是<code>k=3+7+(-1)+8</code>，这就变成了由3个加号运算符和4个操作数组成的表达式。<br>&ensp;&emsp;算术运算符的结合性都是“左向右”，因此先计算<code>3+7</code>的和，再加上<code>-1</code>，最后加上<code>8</code>，结果是<code>17</code></p><h2 id="1-17-5-类型转换"><a href="#1-17-5-类型转换" class="headerlink" title="1.17.5 类型转换"></a>1.17.5 类型转换</h2><p>&ensp;&emsp;当一个运算符的几个操作数类型不同时，编译器需要将它们转换为相同的数据类型才能进行运算。通常情况下，编译器会将占用“坑位”较小的操作数转换为占用“坑位”较大的操作数的数据类型，再进行运算（这样做是为了确保计算的精确度<br>&ensp;&emsp;当遇到类似<code>1+2.0</code>这种两种不同数据类型的操作数运算时，编译器首先将<code>1</code>转换为浮点型<code>1.0</code>，然后再与<code>2.0</code>相加，得到同样为浮点型的结果<code>3.0</code><br>&ensp;&emsp;如下例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;整型输出：%d\n&quot;</span>, <span class="number">1</span> + <span class="number">2.0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;浮点型输出：%f\n&quot;</span>, <span class="number">1</span> + <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/5.png"></p><p>&ensp;&emsp;如果以<code>%d</code>整型的格式打印，那么输出结果是<code>0</code>，这是由于<code>printf</code>指定了错误的输出格式导致的，而用<code>%f</code>可以正确的打印出结果<code>3.0</code> <br><br>&ensp;&emsp;除了编译器帮助自动转换不同类型的操作数之外，C语言还允许强制转换操作数的数据类型。做法就是在操作数的前面用小括号将目标数据类型括起来，代码修改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;整型输出：%d\n&quot;</span>, <span class="number">1</span> + (<span class="type">int</span>)<span class="number">2.0</span>);</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>&ensp;&emsp;现在就可以使用<code>%d</code>打印计算结果了，程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/6.png"></p><p>再有一种情况，如果待转换的操作数是<code>1.8</code>，那么转换后的结果应该如何<br>将代码修改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;整型输出：%d\n&quot;</span>, <span class="number">1</span> + (<span class="type">int</span>)<span class="number">1.8</span>);</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.17%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/7.png"></p><p>结果并不是“四舍五入”，因为<b><span style="color:#a70e85;">C语言的做法是直接去掉小数部分的值</span></b>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;几乎每一个有意义的程序都需要进行计算，写代码设计程序，就是为了告诉计算机如何对数据进行加工处理，最后得出想要的结果。&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.16：字符串</title>
    <link href="http://example.com/2023/08/24/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-16%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2023/08/24/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-16%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-08-24T09:27:50.000Z</published>
    <updated>2023-08-24T09:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>C语言并没有专门为存储字符串设计一个单独的类型。</p><span id="more"></span><p>C语言并没有专门为存储字符串设计一个单独的类型。<br>字符串事实上就是一串字符，所以只需要在内存中找一块空间，然后存放一串字符类型的变量就可以了。<br>定义字符串的语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> 变量名[数量];</span><br></pre></td></tr></table></figure><p>对字符串进行赋值，事实上就是对这一块空间里边的每一个字符变量大小的位置进行赋值，通过索引号来获取每个位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名[索引号] = 字符;</span><br></pre></td></tr></table></figure><p>比如下面几个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[<span class="number">5</span>];</span><br><span class="line">name[<span class="number">0</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">name[<span class="number">1</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">name[<span class="number">2</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">name[<span class="number">4</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：<br>这个索引号是从0开始计算，所以由5个字符构成的字符串，它们的索引号分别是1、2、3、4</p><p>字符串的定义还可以直接这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[<span class="number">5</span>] = &#123;<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>下面举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> a[<span class="number">5</span>] = &#123;<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.16%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png"></p><p>看上去是没问题了，但这个程序是有隐藏漏洞的。</p><p>现在添加一个printf函数，打印”Hello!”：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> a[<span class="number">5</span>] = &#123;<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.16%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png"></p><p>可能会出现乱码；回想C语言是如何处理字符串常量的，没错，为了确定字符串结束的位置，规定在字符串的最后加上一个<code>&#39;\0&#39;</code>来表示结束。 <br><br>这里声明了5个<code>char</code>类型的变量，刚好用来存放5个字符，这样最后就没有位置存放表示字符串结束的<code>&#39;\0&#39;</code>了。 <br><br>所以应该这样改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">5</span>] = &#123;<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>修改后程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.16%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/3.png"></p><p>定义字符串时，中括号里面的数量其实可以不写，编译器会自动计算字符串的长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>事实上还可以在偷懒一下，直接再大括号中写入字符串常量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&quot;FishC&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>这样使用字符串常量就不必惦记着在末尾添加一个<code>&#39;\0&#39;</code>，因为编译器会自动帮你加上。<br>最后如果使用字符串常量的话，这个大括号也是可以省掉的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;FishC&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C语言并没有专门为存储字符串设计一个单独的类型。&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.15：字符</title>
    <link href="http://example.com/2023/08/23/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-15%EF%BC%9A%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2023/08/23/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-15%EF%BC%9A%E5%AD%97%E7%AC%A6/</id>
    <published>2023-08-23T01:15:39.000Z</published>
    <updated>2023-08-23T01:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中，使用char来声明 字符变量</p><span id="more"></span><p>在C语言中，使用<code>char</code>来声明 字符变量，<code>printf</code>函数使用<code>%c</code>来输出字符。<br>其实字符变量还可以用来存放整数，并且会输出意想不到的结果<br>来看下面这个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c = %d\n&quot;</span>, a, a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.15%EF%BC%9A%E5%AD%97%E7%AC%A6/1.png"></p><p>这里声明了一个变量字符a，并用它存放了一个大写字母’C’。然后调用<code>printf</code>函数，将变量a使用%c字符的形式以及%d整数的形式打印出来。于是结果为C&#x3D;67。<br>这不由想到摩斯密码，字符也同样是利用“查表”的原理<br>C语言中有一张对照表，将二进制数与英文字符一一对应，这就是<b><span style="color:#f0768b;">ASCII字符表</span></b>。<br>标准ASCII字符表使用7位二进制数来表示</p><ul><li>所有的大写和小写字母</li><li>数字0~9</li><li>标点符号</li><li>美式英语中使用的特殊控制字符<br>其中，ASCII字符表上的数字0~31以及127（共33个）分配给了控制字符，用于控制打印机等一些外围设备，见表1-4。<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.15%EF%BC%9A%E5%AD%97%E7%AC%A6/2.png"></li></ul><p>数值32~126分配给了能在键盘上找到的字符，见表1-5<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.15%EF%BC%9A%E5%AD%97%E7%AC%A6/3.png"></p><p>正如上面例子中的大写字母’C’，如果直接将它存放在字符变量中的数值打印出就是ASCII字符表’C’对应的数值，即67.<br>下面例子声明几个字符变量，先给它们直接赋值整数，再以字符的形式打印： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">70</span>, b = <span class="number">105</span>, c = <span class="number">115</span>, d = <span class="number">104</span>, e = <span class="number">67</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, a, b, c, d, e);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.15%EF%BC%9A%E5%AD%97%E7%AC%A6/4.png"></p><p>得出结论：<br><br>字符类型事实上就是一个特殊的整型，所以字符类型也有取值范围，也可以用signed和unsigned修饰。对于整数类型来说，如果不写signed或unsigned，那么默认是signed带符号位的。<br>但是，C标准并没有规定char必须是signed char还是unsigned char，C语言将这个决定的权力交由编译系统自行实现。</p><p>注：这个细节导致用C语言写出来的代码含有隐藏的漏洞</p><p>比如，开发一个程序，需要用一个变量来存放用户身高数据。某程序员使用char类型来存放身高数据，在他的编译系统里，char默认是unsigned char，取值范围也就是0~255。但是同样的代码，如果放到自己搭建的环境上结果又是怎样呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> height;</span><br><span class="line">        height = <span class="number">170</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该用户身高是%d厘米！\n&quot;</span>, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.15%EF%BC%9A%E5%AD%97%E7%AC%A6/5.png"></p><p>这里的身高反向生长了……<br>所以这个例子给我们的经验就是：写任何代码，都不要想当然。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C语言中，使用char来声明 字符变量&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.2：求解具体函数定义域</title>
    <link href="http://example.com/2023/08/19/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-2%EF%BC%9A%E6%B1%82%E8%A7%A3%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%9F%9F/"/>
    <id>http://example.com/2023/08/19/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-2%EF%BC%9A%E6%B1%82%E8%A7%A3%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%9F%9F/</id>
    <published>2023-08-19T14:34:15.000Z</published>
    <updated>2023-08-19T14:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数定义域以及对应法则</p><span id="more"></span><p>&ensp;&emsp;定义域，及对应法则 &lt;&#x3D;&#x3D;&gt; 两要素</p><h2 id="定义域考点："><a href="#定义域考点：" class="headerlink" title="定义域考点："></a>定义域考点：</h2><ul><li>具体函数求定义域</li><li>抽象函数求定义域</li></ul><hr><h2 id="1）求解具体函数定义域"><a href="#1）求解具体函数定义域" class="headerlink" title="1）求解具体函数定义域 "></a>1）求解具体函数定义域 <br></h2><p>具体函数：知道函数的具体函数表达式. 如：y&#x3D;x+1；y&#x3D;x<sup>2</sup>+2；lnx <br><br>常见具体函数定义域（带*表示常考）：<br></p><ul><li>$y&#x3D;\frac{1}{x}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\neq0$ <br></li><li>$y&#x3D;\sqrt[2n]{x}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\geq0$ <br></li><li>$y&#x3D;\sqrt[2n+1]{x}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\in R$ 也就是 $x\in(-\infty,+\infty)$ <br></li><li>$y&#x3D;\log_a^x$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x&gt;0$ &ensp;&emsp; 【$\log_a^x$ 对数函数 其中x是真数】 <br><br>&ensp;$y&#x3D;lnx$ <b><span style="color:#a70e85;">—-&gt;</span></b> x&gt;0 <br></li><li>$y&#x3D;tanx$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\neq k\pi+\frac{\pi}{2}$ &ensp;&emsp; 【tanx正切函数基本表达式$tanx&#x3D;\frac{sinx}{cosx}$】 <br></li><li>$y&#x3D;cotx$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\neq k\pi$ <br></li><li>$y&#x3D;arctanx$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\in R$ &ensp;&emsp; $x\in(-\infty,+\infty)$ <br><br>&ensp;$y&#x3D;arccotx$ <b><span style="color:#a70e85;">—-&gt;</span></b> 【arc意思是取反；arctanx反三角函数】 <br></li><li>$\begin{Bmatrix}y&#x3D;arcsinx\y&#x3D;arccosx\end{Bmatrix}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\in[-1,1]$ <br><br>$<br>\begin{Bmatrix}<br>y &#x3D; arcsinx &amp; \<br>y &#x3D; arccosx &amp;<br>\end{Bmatrix}<br>x \epsilon [-1,1]<br>$</li></ul><hr><p>注意：整体思想<br>比如：<br><br>$\frac{1}{x}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\neq0$ <br><br>$\frac{1}{x^2}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $x^2\neq0$ <br><br>$\frac{1}{2x+1}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $2x+1\neq0$ <br><br>再例如：<br><br>$\sqrt x\ $ <b><span style="color:#a70e85;">—-&gt;</span></b> $x\geq0$ <br><br>$\frac{1}{abc}$ <b><span style="color:#a70e85;">—-&gt;</span></b> $abc\neq0$ <br><br>把 $x$ 部分看成整体 再去代入</p><p><b>eg:</b>求 $y&#x3D;\sqrt{2x+1}$ 的定义域 <br><br>解：$2x^2-x-1\neq0$</p><p><img src="/image/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.2%EF%BC%9A%E6%B1%82%E8%A7%A3%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%9F%9F/1.jpg" alt="十字相乘法"></p><ul><li>$(2x-1)(x+1)\neq0$ <br></li><li>$\begin{cases}(2x+1)\neq0\(2x+1)\neq0\end{cases}$ $\begin{cases}x\neq\frac{1}{2}\x\neq-1\end{cases}$</li></ul><h2 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h2><h3 id="1）求根公式：-y-ax-2-bx-c-0"><a href="#1）求根公式：-y-ax-2-bx-c-0" class="headerlink" title="1）求根公式：$y&#x3D;ax^2+bx+c&#x3D;0$ "></a>1）求根公式：$y&#x3D;ax^2+bx+c&#x3D;0$ <br></h3><h3 id="2）十字相乘：-x-2-a-b-x-ab-0"><a href="#2）十字相乘：-x-2-a-b-x-ab-0" class="headerlink" title="2）十字相乘：$x^2+(a+b)x+ab&#x3D;0$ "></a>2）十字相乘：$x^2+(a+b)x+ab&#x3D;0$ <br></h3><p><img src="/image/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.2%EF%BC%9A%E6%B1%82%E8%A7%A3%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%9F%9F/2.jpg" alt="十字相乘法"><br>交叉相乘后得到$(x+b)(x+a)&#x3D;0$ <br><br>这个式子打开后也等同于$x^2+(a+b)x+ab&#x3D;0$ <br></p><h3 id="3）完全平方和差：-a-b-2-a-2-2ab-b-2"><a href="#3）完全平方和差：-a-b-2-a-2-2ab-b-2" class="headerlink" title="3）完全平方和差：$(a+b)^2&#x3D;a^2+2ab+b^2$ "></a>3）完全平方和差：$(a+b)^2&#x3D;a^2+2ab+b^2$ <br></h3><p>eg：求 $y&#x3D;\frac{\sqrt{2x+1}}{2x^2-x-1}$ 的定义域<br>解：<br>$\begin{cases}2x+1\geq0\2x^2-x-1\neq0\end{cases}$<br>$\begin{cases}x\geq-\frac{1}{2}\x\neq-\frac{1}{2}且x\neq1\end{cases}$<br><img src="/image/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.2%EF%BC%9A%E6%B1%82%E8%A7%A3%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%9F%9F/3.jpg" alt="区间"><br>$\therefore x\in(-\frac{1}{2},1)\cup(1,+\infty)$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数定义域以及对应法则&lt;/p&gt;</summary>
    
    
    
    <category term="高数" scheme="http://example.com/categories/%E9%AB%98%E6%95%B0/"/>
    
    
    <category term="高数" scheme="http://example.com/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>1.1：函数的概念</title>
    <link href="http://example.com/2023/08/19/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-1%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2023/08/19/%E9%AB%98%E6%95%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-1%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2023-08-19T07:27:41.000Z</published>
    <updated>2023-08-19T07:27:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数 Function</p><span id="more"></span><h2 id="函数-Function"><a href="#函数-Function" class="headerlink" title="函数 Function"></a>函数 Function</h2><h2 id="定义：自变量-x；因变量-y；"><a href="#定义：自变量-x；因变量-y；" class="headerlink" title="定义：自变量 x；因变量 y；"></a>定义：自变量 x；因变量 y；</h2><p>x通过一个对应法则，与y一一对应，记 <b><span style="color:#f0768b;">y&#x3D;f(x)</span></b></p><p>即：一个事物变，带动了另一个事物变化，二者所存在的关系，称<b><span style="color:#f0768b;">函数关系</span></b></p><p>如：y&#x3D;x<sup>2</sup>.  二次函数</p><p>正方形的面积：</p><ul><li>S&#x3D; 边长 × 边长</li><li>S&#x3D; x<sup>2</sup>.</li><li>面积随着边长的变化而变化</li></ul><h2 id="考点-："><a href="#考点-：" class="headerlink" title="考点 ："></a>考点 ：</h2><p>1）定义域：指x的取值范围<br>2）对应法则：指对x的加工&#x2F;处理方式</p><ul><li>用f, g, h……等字母表示</li><li>可写成f(x), g(x), h(x)……  字母不同表示对应法则所不同</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数 Function&lt;/p&gt;</summary>
    
    
    
    <category term="高数" scheme="http://example.com/categories/%E9%AB%98%E6%95%B0/"/>
    
    
    <category term="高数" scheme="http://example.com/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>1.14：取值范围</title>
    <link href="http://example.com/2023/08/18/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/"/>
    <id>http://example.com/2023/08/18/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</id>
    <published>2023-08-18T12:38:55.000Z</published>
    <updated>2023-08-18T12:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>取值范围——这个变量可以存放的最大值和最小值分别是多少</p><span id="more"></span><h2 id="取值范围"><a href="#取值范围" class="headerlink" title="取值范围"></a>取值范围</h2><p>取值范围——这个变量可以存放的最大值和最小值分别是多少<br>比特位 CPU能读懂的最小单位——<b><span style="color:#f0768b;">&gt;比特位（bit，b）</span></b><br>字节 内存机构的最小寻址单位——<b><span style="color:#f0768b;">字节（Byte，B）</span></b><br>1Byte &#x3D;&#x3D; 8bit</p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/1.png"></p><div align="center"><b>十进制数表示：</b></div><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/2.png"></p><p>1字节(Byte) &#x3D;&#x3D; 8比特(bit) ，用二进制表示是 11111111，而对应的十进制数就是 255，值是一样的，只是表示的方式不同。<br>255 就是 1 字节可以表示的最大值。<br>1.12 节中求得 <b><span style="color:#f0768b;">sizeof(int)</span></b> 的值是4字节，也就是一个整型变量在这个虚拟机系统中占4字节的存储空间；<br>4字节就是32比特，用二进制表示最大值就是32个1，用十进制就是<br><b>2<sup>32</sup>-1&#x3D;4 294 967 295</b></p><p>计算方式：<br>观察表1.2：二进制11对应十进制的值相当于2的2次方减1 <b>(2<sup>2</sup>-1&#x3D;3）</b>；<br>二进制111对应十进制的值相当于2的3次方减1 <b>(2<sup>3</sup>-1&#x3D;7)</b>;<br>二进制1111对应十进制的值相当于2的4次方减1 <b>(2<sup>4</sup>-1&#x3D;15)</b>……也就是说有多少比特，就是先求2的多少次方，再减1，对应的就是转换为十进制数的值。<br>所以，二进制32个1可以表示最大值应该就是2的32次方减1，即<b>2<sup>32</sup>-1&#x3D;4 294 967 295</b></p><h2 id="pow函数"><a href="#pow函数" class="headerlink" title="pow函数"></a>pow函数</h2><p><b><span style="color:#f0768b;">pow函数</span></b>用于进行求幂运算，只要将底数和指数作为参数传递给它，就会返回对应的结果。<br>比如，pow(2,3) 返回的是8，pow(2,5) 返回的是32。<br>现在利用pow函数，算int可以存放的最大值是多少：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">32</span>) - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>, result);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：pow函数属于math库的函数，所以编译的时候需要加上 -lm 命令</p><div align="center">程序实现如下：<b></b></div><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/3.png"></p><p>打印出了结果<code>“result = 2147483647”</code>，但却多了警告提示，编译后如果出现一些奇怪的内容，那就说明代码有问题<br>这是GCC编译器给我们的提醒：<code>test.c:6:2: 警告：隐式常量转换溢出 [-Woverflow]</code>，意思是代码的第6行有个警告。<br>一般编译结果有问题就可能出现<code>警告（warning）</code>或<code>错误（error）</code>；<br>警告表示编译器怀疑你的代码有问题，但可以通过编译并生成可执行文件；而错误则表示代码存在语法错误，无法通过编译。这里是一个警告，内容是：隐式常量转换溢出。<br>2的32次方减1的值应该等于4 294 97 295，而编译器显示的却是2 147 483 647，在默认情况下，<code>int</code>是<code>signed</code>类型，即<b><span style="color:#f0768b;">带符号位的整型</span></b>。<br>在存放整型的存储单元中，左边第一位不用来存放数值，而是表示符号位。<br>如果该位为0，表示该整数是一个正数；如果该位为1，表示该整数是一个负数。所以如果想要将整型的32比特全部用来存放数据的值，那就必须用unsigned int来声明变量</p><div align="center">代码修改为：<b></b></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">32</span>) - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %u\n&quot;</span>, result);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><b>程序实现如下：</b></div><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/4.png"></p><p>那么如果是signed int类型，可以存放的最大值是多少？</p><p>分析：一个32比特的整型变量，除去左边第一位是符号位，剩下表示值的只有31比特。因此，<code>int</code>类型最大能够存放的整数应该是2的31次方减1.</p><div align="center"><b>代码如下：</b></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>, result);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><b>程序实现如下：</b></div><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/5.png"></p><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>无符号位数最小是肯定是0，因为它没有负数。但对于有符号数来说，它的最小值应该是多少？</p><p>要弄清楚这个问题，就需要先弄清楚计算机是如何存储负数。事实上，<b><span style="color:#f0768b;">计算机是用补码的形式来存放整数的值（包括正整数和负整数）</span></b>。</p><p>正整数的补码是该数的二进制形式；</p><p>负数的补码需要通过以下几步获得：先取得该数的绝对值的二进制形式；再按位取反；最后加1<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/6.png"></p><p>使用补码来存放整数有一些特征：当符号位为0时，后边的1越多，整数的值越大；而当符号位为1时，后边的0越多，整数的值就越小，如图1-16所示</p><p>对于1字节来说，最小值是-128，而最大值却是127，这是因为从正数中分割了一个位置给一个特殊的数，那就是0。</p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/7.png"></p><p>表1-3是截至目前接触过的数据类型的取值范围。</p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.14%EF%BC%9A%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/8.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;取值范围——这个变量可以存放的最大值和最小值分别是多少&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>算法之基础</title>
    <link href="http://example.com/2023/08/18/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/08/18/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2023-08-18T08:21:21.000Z</published>
    <updated>2023-08-19T08:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。</p><span id="more"></span><h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><ul><li><strong>输入</strong>：可以有零个或多个参数</li><li><strong>输出</strong>：必须有一个或多个结果</li><li><strong>有穷性</strong>：算法必须会结束，没有无限循环</li><li><strong>确定性</strong>：有唯一结果</li><li><strong>可行性</strong>：算法每一步都能通过执行有限次数完成</li></ul><h1 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h1><ul><li><strong>正确性</strong>：算法至少具有输入、输出和过程明确的加工处理，正确反映问题的需求，最后得到期望的答案<ul><li>算法程序没有语法错误</li><li>算法程序对于合法输入能产生期望的答案</li><li>算法程序对于非法输入能产生警告和提示</li><li>算法程序对于故意掉难得测试输入都能产生期望的结果</li></ul></li><li><strong>可读性</strong>：算法便于阅读、理解和交流</li><li><strong>健壮性</strong>：能够处理异常、崩溃或莫名其妙的结果</li><li><strong>高时间效率和低存储量</strong>：算法要考虑处理速度和内存用量</li></ul><h1 id="算法效率度量方法"><a href="#算法效率度量方法" class="headerlink" title="算法效率度量方法"></a>算法效率度量方法</h1><ul><li>事后统计方法：通过执行多个输入测试，记录执行时间平均值</li><li>事前估算方法：通过统计方法对算法进行估算，涉及以下因素<ol><li>算法策略，<strong>例子使用公式或者循环等</strong></li><li>编译后的代码质量，<strong>基础操作的次数统计</strong></li><li>问题的输入规模，<strong>例子数值大小或元素数量等</strong></li><li>机器执行指令的速度，<strong>硬件性能</strong></li></ol></li></ul><p><strong>算法基础种类分别有：<code>1</code>、<code>n</code>、<code>n*n</code>。</strong></p><p>一般使用公式或瀑布式条件判断的算法策略属于<code>1</code>；使用单个循环的属于<code>n</code>；使用嵌套循环的属于<code>n*n</code>。3种算法中往往常数算法<code>1</code>要优于<code>n</code>和<code>n*n</code>。给以下基础操作次数公式分类：</p><ul><li><code>1</code>：<code>3</code>、<code>5</code>、<code>9</code>等</li><li><code>n</code>：<code>n</code>、<code>n+1</code>、<code>2n+3</code>等</li><li><code>n*n</code>：<code>n^2</code>、<code>n^2+5</code>、<code>2n^3+1</code>等</li></ul><p><strong>一般判断算法好坏，更应该关注函数公式的主项：指数最高项。</strong><br>比如算法<code>2n^2+n+3</code>对比算法<code>n^3+2n+1</code>，因为<code>2n^2</code>指数低于<code>n^3</code>，所以算法<code>2n^2+n+3</code>优于算法<code>n^3+2n+1</code>。</p><h2 id="怎么分析一个算法的输入时间？"><a href="#怎么分析一个算法的输入时间？" class="headerlink" title="怎么分析一个算法的输入时间？"></a>怎么分析一个算法的输入时间？</h2><ul><li>抽象算法：去除算法中循环的外包装、条件的判断、变量的声明、打印输出等操作</li><li>指令计数：统计关联的输入模式下基础操作的数量</li></ul><h2 id="求和1-100的算法例子分析"><a href="#求和1-100的算法例子分析" class="headerlink" title="求和1-100的算法例子分析"></a>求和1-100的算法例子分析</h2><p>以下<em>算法一</em>，算法策略使用<code>循环</code>，编译后的代码质量为<code>n</code>次，问题的输入规模<code>100</code>，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight js"><figcaption><span>JavaScript 算法一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; i++) &#123;</span><br><span class="line">  sum += i;                  <span class="comment">// 执行 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下<em>算法二</em>，算法策略使用<code>公式</code>，编译后的代码质量为<code>1</code>次，问题的输入规模<code>100</code>，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight js"><figcaption><span>JavaScript 算法二</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line">sum = (i + n) * n  / <span class="number">2</span>;      <span class="comment">// 执行 1 次</span></span><br></pre></td></tr></table></figure><p>对比以上算法，它们的输入规模都是<code>100</code>，在同一计算机运行的情况下，<strong>算法一</strong>的基础操作次数受输入规模的影响，造成工作量超出<strong>算法二</strong>，<strong>所以算法二效率更高</strong>。</p><h2 id="求和3x3表格内数值的例子分析"><a href="#求和3x3表格内数值的例子分析" class="headerlink" title="求和3x3表格内数值的例子分析"></a>求和3x3表格内数值的例子分析</h2><p>以下<em>表格遍历例子</em>，算法策略使用<code>嵌套的循环</code>，编译后的代码质量为<code>n^2</code>次，问题的输入规模<code>3x3</code>，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight js"><figcaption><span>JavaScript 表格遍历求和例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, </span><br><span class="line">    table = [</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">      [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= table.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= table[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">    sum += table[i][j];      <span class="comment">// 执行 n^2 次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上算法，它根据表格的大小，基础操作的数量是以指数上升的，<strong>所以<code>3x3</code>的表格内数值总和计算一共有基础操作<code>3^2</code>等于9次</strong>。</p><h1 id="用大O记法表示算法时间复杂度"><a href="#用大O记法表示算法时间复杂度" class="headerlink" title="用大O记法表示算法时间复杂度"></a>用大O记法表示算法时间复杂度</h1><p>复杂度分为：<strong>时间复杂度</strong>或<strong>空间复杂度</strong><br><strong>一般计算“复杂度”是指“时间复杂度”，而不是空间复杂度，目前主流还是时间复杂度，不求用内存换取时间。</strong></p><p><strong>T(n) &#x3D; O(f(n))</strong>，<code>f(n)</code>为算法的函数或入口，随着输入规模<code>n</code>的增长，<code>T(n)</code>增长最慢的算法为最优算法。因为以下原因：</p><p><strong>基础操作数量 &#x3D; 时间</strong></p><p>所以当<code>n</code>翻倍时，<em>基础操作数量</em>增长越少，花费的<em>时间</em>越少。</p><p>上面用到的三个求和算法例子，如果用大O表示算法的时间复杂度分别为<code>O(1)</code>、<code>O(n)</code>、<code>O(n^2)</code>。</p><p><strong>大O记法表示时间的增长率</strong></p><ul><li><code>O(1)</code>：增长率不变</li><li><code>O(n)</code>：增长率倍数增长</li><li><code>O(n^2)</code>：增长率指数增长</li></ul><h2 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h2><p>用一下方法来推导<code>5</code>、<code>2n+3</code>、<code>n(n+1)/2</code>和<code>O(logn)</code>的大O阶：</p><ol><li>用常数1取代所有加法常数</li><li>只保留最高阶项</li><li>最高阶项不是1的话，去除这个项相乘的常数</li></ol><p><code>5</code> &#x3D;&gt; <code>O(1)</code>，<br><code>2n+3</code> &#x3D;&gt; <code>O(n)</code>，<br><code>n(n+1)/2</code> &#x3D;&gt; <code>O(n^2)</code></p><p>一面这个例子的话就是<code>O(logn)</code>：</p><figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">  i *= <span class="number">2</span>; <span class="comment">// 2^x = n，那么 x = log(2)n，x为循环次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><table><thead><tr><th align="center">例子</th><th align="center">时间复杂度</th><th align="center">术语</th></tr></thead><tbody><tr><td align="center">5</td><td align="center">O(1)</td><td align="center">常数阶</td></tr><tr><td align="center">3n+4</td><td align="center">O(n)</td><td align="center">线性阶</td></tr><tr><td align="center">3n^2+4n+5</td><td align="center">O(n^2)</td><td align="center">平方阶</td></tr><tr><td align="center">3log(2)n+4</td><td align="center">O(logn)</td><td align="center">对数阶</td></tr><tr><td align="center">2n+3nlog(2)n+14</td><td align="center">O(nlogn)</td><td align="center">nlogn阶</td></tr><tr><td align="center">n^3+2n^2+4n+6</td><td align="center">O(n^3)</td><td align="center">立方阶</td></tr><tr><td align="center">2^n</td><td align="center">O(2^n)</td><td align="center">指数阶</td></tr></tbody></table><p>时间复杂度对比：<br><strong><code>O(1)</code> &lt; <code>O(logn)</code> &lt; <code>O(n)</code> &lt; <code>O(nlogn)</code> &lt; <code>O(n^2)</code> &lt; <code>O(n^3)</code> &lt; <code>O(2^n)</code> &lt; <code>O(n!)</code> &lt; <code>O(n^n)</code></strong></p><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="基础" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Big O" scheme="http://example.com/tags/Big-O/"/>
    
  </entry>
  
  <entry>
    <title>网易云音乐歌单JS音乐播放器JS代码</title>
    <link href="http://example.com/2023/08/17/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95JS%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8JS%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2023/08/17/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95JS%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8JS%E4%BB%A3%E7%A0%81/</id>
    <published>2023-08-17T10:09:00.000Z</published>
    <updated>2023-08-17T10:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/gallery/yaoplayer-0.jpg" alt="JS音乐播放器截图"><br>网易云音乐歌单JS音乐播放器JS代码<br>感谢<a href="//github.com/messoer/mess-api-doc">MessAPI</a>提供的网易云音乐API<br>代码依赖jQuery和fontawesome</p><span id="more"></span><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;https://v1.itooi.cn/netease/songList&#x27;</span>, &#123;</span><br><span class="line"><span class="string">&#x27;id&#x27;</span>: <span class="number">998389130</span> <span class="comment">// 此处歌单ID</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">json</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (json.<span class="property">data</span> != <span class="literal">undefined</span> &amp;&amp; json.<span class="property">data</span> != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">json.<span class="property">data</span>.<span class="property">tracks</span> != <span class="literal">undefined</span> &amp;&amp; json.<span class="property">data</span>.<span class="property">tracks</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">append</span>(<span class="keyword">new</span> <span class="title class_">YaoPlayer</span>(<span class="string">&#x27;YaoPlayer&#x27;</span>, json.<span class="property">data</span>.<span class="property">tracks</span>.<span class="title function_">map</span>(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: song.<span class="property">name</span>,</span><br><span class="line">        <span class="string">&#x27;singer&#x27;</span>: song.<span class="property">artists</span>.<span class="title function_">map</span>(<span class="function"><span class="params">artist</span> =&gt;</span> artist.<span class="property">name</span>).<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;lrc&#x27;</span>: <span class="string">&#x27;Not found&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pic&#x27;</span>: song.<span class="property">album</span>.<span class="property">picUrl</span>,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">`https://v1.itooi.cn/netease/url?id=<span class="subst">$&#123;song.id&#125;</span>&amp;quality=128`</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="插件全代码"><a href="#插件全代码" class="headerlink" title="插件全代码"></a>插件全代码</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/gallery/yaoplayer-0.jpg&quot; alt=&quot;JS音乐播放器截图&quot;&gt;&lt;br&gt;网易云音乐歌单JS音乐播放器JS代码&lt;br&gt;感谢&lt;a href=&quot;//github.com/messoer/mess-api-doc&quot;&gt;MessAPI&lt;/a&gt;提供的网易云音乐API&lt;br&gt;代码依赖jQuery和fontawesome&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://example.com/categories/Blog/"/>
    
    <category term="Plugin" scheme="http://example.com/categories/Blog/Plugin/"/>
    
    
    <category term="音乐播放器" scheme="http://example.com/tags/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>1.13：signed和unsigned</title>
    <link href="http://example.com/2023/08/07/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-13%EF%BC%9Asigned%E5%92%8Cunsigned/"/>
    <id>http://example.com/2023/08/07/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-13%EF%BC%9Asigned%E5%92%8Cunsigned/</id>
    <published>2023-08-07T09:45:05.000Z</published>
    <updated>2023-08-07T09:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>类型限定符</p><span id="more"></span><h2 id="类型限定符–它们用于限定char类型和任何类型变量的取值范围"><a href="#类型限定符–它们用于限定char类型和任何类型变量的取值范围" class="headerlink" title="类型限定符–它们用于限定char类型和任何类型变量的取值范围"></a>类型限定符–它们用于限定char类型和任何类型变量的取值范围</h2><p><code>signed </code>表示该变量是带符号位的<br><code>unsigned</code> 表示该变量是不带符号位的<br>带符号位的变量可以表示负数；而不带符号位的变量只能表示正数，他的存储空间也就相应扩大1倍<br>默认所有的整型变量都是 <code>signed</code> 的，也就是带符号位的<br>加上 <code>signed</code> 和 <code>unsigned</code> 限定符，4种整型就变成了以下8种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">signed</span>] <span class="type">short</span> [<span class="type">int</span>]</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> [<span class="type">int</span>]</span><br><span class="line">[<span class="type">signed</span>] <span class="type">int</span></span><br><span class="line">unsigend <span class="type">int</span></span><br><span class="line">[<span class="type">signed</span>] <span class="type">long</span> [<span class="type">int</span>]</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> [<span class="type">int</span>]</span><br><span class="line">[<span class="type">signed</span>] <span class="type">long</span> <span class="type">long</span> [<span class="type">int</span>]</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> [<span class="type">int</span>] </span><br></pre></td></tr></table></figure><p>如下例子：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.13%EF%BC%9Asigned%E5%92%8Cunsigned/1.png"></p><p>注：printf()函数用%u表示输出无符号整数</p><p>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.13%EF%BC%9Asigned%E5%92%8Cunsigned/2.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;类型限定符&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.12：sizeof运算符</title>
    <link href="http://example.com/2023/08/06/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-12%EF%BC%9Asizeof%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2023/08/06/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-12%EF%BC%9Asizeof%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2023-08-05T16:50:36.000Z</published>
    <updated>2023-08-05T16:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>C语言标准没有规定基本数据类型的具体尺寸是多少</p><span id="more"></span><p>C语言标准没有规定基本数据类型的具体尺寸是多少，但提供了一个特殊的运算符——<b><span style="color:#f0768b;">sizeof运算符</span></b><br><b><span style="color:#f0768b;">sizeof运算符</span></b>用于获得数据类型或表达式的尺寸<br>以下3种使用方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(type_name);  <span class="comment">//sizeof(类型);</span></span><br><span class="line"><span class="keyword">sizeof</span>(object);  <span class="comment">//sizeof(对象);</span></span><br><span class="line"><span class="keyword">sizeof</span> object;  <span class="comment">//sizeof 对象; </span></span><br></pre></td></tr></table></figure><p>如下图示范：<br><br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.12%EF%BC%9Asizeof%E8%BF%90%E7%AE%97%E7%AC%A6/1.png"></p><p>程序实现如下：<br><br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.12%EF%BC%9Asizeof%E8%BF%90%E7%AE%97%E7%AC%A6/2.png"></p><p>下面的例子中，将当前编译系统的基本数据类型所占的信息打印出来：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.12%EF%BC%9Asizeof%E8%BF%90%E7%AE%97%E7%AC%A6/3.png"><br>程序实现如下：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.12%EF%BC%9Asizeof%E8%BF%90%E7%AE%97%E7%AC%A6/4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C语言标准没有规定基本数据类型的具体尺寸是多少&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.11：数据类型</title>
    <link href="http://example.com/2023/08/05/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-11%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2023/08/05/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-11%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-08-04T17:01:59.000Z</published>
    <updated>2023-08-04T17:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据类型指的就是这个坑的尺寸</p><span id="more"></span><p>前面比喻了变量就是在内存里挖一个“坑”，然后给这个“坑”命名，那么<b><span style="color:#f0768b;">数据类型指的就是这个坑的尺寸</span></b></p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.11%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1.png"></p><p>前面接触了整型<code>int</code>、浮点型<code>float</code>、<code>double</code>，字符型<code>char</code><br>C99标准还补充了一个<b><span style="color:#f0768b;">布尔类型</span></b>：<code>_Bool</code>(就目前学到的所有数据类型中，C标准规范存储空间最小的是_Bool)<br>布尔类型就是只表示两个值：<b><span style="color:#f0768b;">真或假</span></b>，也就是<code>true</code> 或 <code>false</code></p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.11%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2.png"></p><p>这些基本的数据类型还可以加上一些限定符，如表示长度的 <code>short</code> 和 <code>long</code><br>比如，int经过限定符修饰之后，可以说 <code>short int</code>, <code>long int</code>, 还可以是 <code>long long int</code>，其中 <code>long long int</code> 是 C99新增加的<br>C语言并没有规定 <code>int</code> 具体尺寸是占多少字节，标准只是要求：<code>short int &lt;= int &lt;= long int &lt;= long long int</code> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据类型指的就是这个坑的尺寸&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1-10：常量</title>
    <link href="http://example.com/2023/08/04/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-10%EF%BC%9A%E5%B8%B8%E9%87%8F/"/>
    <id>http://example.com/2023/08/04/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-10%EF%BC%9A%E5%B8%B8%E9%87%8F/</id>
    <published>2023-08-03T16:18:25.000Z</published>
    <updated>2023-08-03T16:18:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是常量?</p><span id="more"></span><h1 id="什么是常量"><a href="#什么是常量" class="headerlink" title="什么是常量?"></a>什么是常量?</h1><p><b><span style="color:#6a5acd;">在程序运行过程中，它的值不能够被改变，称为</span></b><b><span style="color:#f0768b;">常量</span></b>。<br>如字符’a’，数字 520，小数 3.14，这些都是常量，因为i它们仅代表一个具体的值，并且不能够被改变。<br>C语言中常见的常量如下：</p><ul><li>(1)整型常量： 520，1314，123</li><li>(2)实型常量： 3.14,5.12,8.97</li><li>(3)字符常量<br>普通字符： ‘L’ , ‘o’ , ‘v’ , ‘e’<br>转义字符： ‘\n’ , ‘\t’ , ‘\b’</li><li>(4)字符串常量： “FishC”</li><li>(5)符号常量：使用之前必须先定义</li></ul><h2 id="1-10-1-定义符号常量"><a href="#1-10-1-定义符号常量" class="headerlink" title="1.10.1 定义符号常量"></a>1.10.1 定义符号常量</h2><p>符号常量的定义格式为： <code>#define 标识符 常量</code><br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.10%EF%BC%9A%E5%B8%B8%E9%87%8F/1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define  //是一条预处理命令（预处理命令都以&quot;#&quot;开头），也称为宏定义命令。</span><br></pre></td></tr></table></figure><p>上边的大写字母URL、NAME、BOSS、YEAR、MONTH、DAY都是<b><span style="color:#f0768b;">符号常量</span></b>  为了将符号常量和普通的变量名区分开来习惯使用大写字母来命名<b><span style="color:#f0768b;">符号常量</span></b>，使用小写字母来命名<span style="color:#f0768b;">变量</span></b></p><h2 id="1-10-2-标识符-identifier"><a href="#1-10-2-标识符-identifier" class="headerlink" title="1.10.2 标识符  (identifier)"></a>1.10.2 标识符  (identifier)</h2><p>在C语言中，标识符指的就是一切都名字。<br>符号常量名是标识符，变量名也是一个标识符，函数、数组、自定义类型的名字都称为标识符<br>标识符的命名就需要符合一定的规律，就是1.9节变量的命名规律</p><h2 id="1-10-3-字符串常量"><a href="#1-10-3-字符串常量" class="headerlink" title="1.10.3  字符串常量"></a>1.10.3  字符串常量</h2><p>用单引号括起来表示一个字符，编译器只需要为每个字符准备一个字节的空间就足够存放了<br>用双引号括起来的表示一个字符串，字符串就是一串字符连起来，那么这串字符在内存中的存放就成了问题（当代码写完了，编译执行的时候，操作系统如何判断一个字符串的长度）<br>C语言的发明者用一个特殊的转义字符来表示字符串的结束位置，这样当操作系统读取到这个转义字符的时候，就知道该字符串到此为止  这个转义字符就是空字符: <code>&#39;\0&#39; </code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是常量?&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.9：变量</title>
    <link href="http://example.com/2023/08/03/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-9%EF%BC%9A%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/2023/08/03/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-9%EF%BC%9A%E5%8F%98%E9%87%8F/</id>
    <published>2023-08-03T15:55:41.000Z</published>
    <updated>2024-01-03T09:57:12.880Z</updated>
    
    <content type="html"><![CDATA[<p><b><span style="color:#f0768b;">变量</span></b>和<b><span style="color:#f0768b;">常量</span></b>是<b><span style="color:#6a5acd;">程序处理的两种基本数据对象</span></b></p><span id="more"></span><hr><p>变量的意义就是<b><span style="color:#f0768b;">确定目标并提供存放的空间 </span></b></p><h2 id="C语言变量名需遵守以下规则："><a href="#C语言变量名需遵守以下规则：" class="headerlink" title="C语言变量名需遵守以下规则："></a>C语言变量名需遵守以下规则：</h2><ul><li><p>C语言变量名只能是英文字母（A-Z，a-z）和数字（0-9）或者下划线（_）组成，其他特殊字母不行。下划线通常用于连接一个比较长的变量名，比如 i_love_fishC</p></li><li><p>第一个字母必须是由英文字母或者下划线开头，也就是不能用数字开头</p></li><li><p>变量名区分大小写。因为C语言是大小写敏感的编程语言，也就是大写的FISHC跟小写的fishc会被认为是不同的两个名字。在传统的命名习惯中，我们用小写字母来命名变量，用大写字母来表示符号常量名。</p></li><li><p>不能使用关键字来命名变量</p></li></ul><h2 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h2><p>关键字就是 C 语言内部使用的名字，这些名字都具有特殊的含义<br><img src="/image/C语言/第一章/1.9：变量/1.png" width="75%"></p><h2 id="C-语言常用的基本数据类型"><a href="#C-语言常用的基本数据类型" class="headerlink" title="C 语言常用的基本数据类型"></a>C 语言常用的基本数据类型</h2><ul><li>Char —— 字符型，占用一个字节</li><li>int —— 整型，通常反映了所用机器中整数的最自然长度</li><li>float —— 单精度浮点型</li><li>double —— 双精度浮点型</li></ul><h2 id="C-语言声明变量的语法"><a href="#C-语言声明变量的语法" class="headerlink" title="C 语言声明变量的语法"></a>C 语言声明变量的语法</h2><ul><li>int a;  <b><span style="color:#a70e85;">&#x2F;&#x2F; 在内存中找到一个整形大小的位置，然后霸占起来，并给它命名叫 a</span></b></li><li>char b;  <b><span style="color:#a70e85;">&#x2F;&#x2F; 在内存中找到一个字节大小的位置，然后霸占起来，并给它命名叫 b</span></b></li><li>float c;  <b><span style="color:#a70e85;">&#x2F;&#x2F; 在内存中找到一个单精度浮点型数据大小的位置，然后霸占起来，并给它命名叫 c</span></b></li><li>double d; <b><span style="color:#a70e85;">&#x2F;&#x2F; 在内存中找到一个双精度浮点型数据大小的位置，然后霸占起来，并给它命名叫 d </span></b></li></ul><p>在声明变量的时候需要指定数据类型，声明变量语法为：</p><img src="/image/C语言/第一章/1.9：变量/2.png" width="75%"><p><b><span style="color:#a70e85;">注：&#x2F;* *&#x2F;中间的内容是注释，用于帮助程序员理解代码，编译器不予理会。</span></b><br>解析程序分析：</p><img src="/image/C语言/第一章/1.9：变量/3.png" width="65%"><p>程序实现如下：</p><img src="/image/C语言/第一章/1.9：变量/4.png" width="60%"><p>变量在声明之后就可以使用它，如：</p><ul><li><p>a &#x3D; 520;      <b><span style="color:#a70e85;">&#x2F;&#x2F;  该语句就是将变量 a 赋值为整数520 （注意：C语言中的语句以分号为结束）</span></b></p></li><li><p>b &#x3D; ‘F’;      <b><span style="color:#a70e85;">&#x2F;&#x2F;  将变量 b 赋值为字符 ‘F’ ,字符类型用单引号括起来</span></b></p></li><li><p>c &#x3D; 3.14;     <b><span style="color:#a70e85;">&#x2F;&#x2F;  将变量 c 赋值为单精度浮点数3.14  单精度浮点型用于存放小数点后位数比较小的浮点数，对于位数比较大的，要用更大的空间来存储，那就是双精度浮点型</span></b></p></li><li><p>d &#x3D; 3.141592653;      <b><span style="color:#a70e85;">&#x2F;&#x2F;  将变量 d 赋值双精度浮点数3.141592653</span></b></p></li></ul><p>最后，1.8节中讲到printf函数为格式化输出，所谓<b><span style="color:#f0768b;">格式化输出就是将这些不同的数据类型转换为字符串的形式，最后打印出来</span></b></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;鱼C工作室创办于2010年的%d\n&quot;</span>, a);  <span class="comment">//&amp;d表示字符串后边跟着的是一个整型的参数（就是变量a），在程序编译的时候就会将变量a转换并替换%d所在字符串的位置 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I love %FishC.com!\n&quot;</span>, b);  <span class="comment">//%c表示转换的目标是一个字符型数据 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;圆周率是：%.2f\n&quot;</span>, c);  <span class="comment">//%f表示转换的目标是一个浮点型数据，可以是单精度浮点型，也可以是双精度浮点型。“.2”表示精度，就是保留小数点后两位的意思 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;精确到小数点后9位的圆周率是：%11.9f\n&quot;</span>, d);  <span class="comment">//同样的，这里变量d精确度比较高（小数点后9位），前边的11表示整个数据所占的总宽度是11位 </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color:#f0768b;&quot;&gt;变量&lt;/span&gt;&lt;/b&gt;和&lt;b&gt;&lt;span style=&quot;color:#f0768b;&quot;&gt;常量&lt;/span&gt;&lt;/b&gt;是&lt;b&gt;&lt;span style=&quot;color:#6a5acd;&quot;&gt;程序处理的两种基本数据对象&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1-8：打印</title>
    <link href="http://example.com/2023/08/02/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-8%EF%BC%9A%E6%89%93%E5%8D%B0/"/>
    <id>http://example.com/2023/08/02/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-8%EF%BC%9A%E6%89%93%E5%8D%B0/</id>
    <published>2023-08-02T14:42:56.000Z</published>
    <updated>2023-08-02T14:42:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编程中，打印就是打印一些数据，往屏幕上输出一些数据的意思</p><span id="more"></span><hr><p><b><span style="color:#f0768b;">printf</span></b> – print 的意思就是打印指定内容到屏幕上；指定的内容就是 <code>printf</code> 紧接着的小括号的双引号里边指定的打印内容<br><b><span style="color:#f0768b;">printf</span></b> 最后的 <code>f</code> 是 <code>formatted</code> 的缩写，格式的意思，因此也通常把 <code>printf</code> 称为格式化输出函数。</p><h2 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符："></a>转义字符：</h2><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.8%EF%BC%9A%E6%89%93%E5%8D%B0/1.png"></p><p>在C语言中，用双引号括起来的内容称为<b><span style="color:#f0768b;">字符串</span></b>，也就是平时所说的文本。字符串可以由可见字符和转义字符组成，像上边组成这条鱼的星号（<code>*</code>）就是可见字符，因为输入什么，显示出来就是什么。<br>如果想将一个字符串分两行来显示，那么就需要使用<b><span style="color:#f0768b;">转义字符</span></b>。<br><b><span style="color:#f0768b;">转义字符</span></b>一般是表示特殊含义的非可见字符，以反斜杠开头（<code>\</code>）</p><p><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.8%EF%BC%9A%E6%89%93%E5%8D%B0/2.png"><br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.8%EF%BC%9A%E6%89%93%E5%8D%B0/3.png"></p><p>因此，这里在想要另起一行打印的位置插入换行符<b><span style="color:#f0768b;">（\）</span></b><br>后边还有一个反斜杠<b><span style="color:#f0768b;">（\）</span></b>不带任何内容，意思是：<b><span style="color:#003f34;">这行代码太长，我想分两行来写</span></b><br><b><span style="color:#a70e85;">注意：下边一行的前面不要带有空格或Tab这类空字符，要紧挨着行首来写。不然C语言会认为前边的空字符也是字符串的一部分。 </span></b><br>事实上反斜杠不仅可用于连接两行字符串，还可以用于连接普通语句<br>比如下面这样写的也是合法的：<br><img src="/image/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.8%EF%BC%9A%E6%89%93%E5%8D%B0/4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在编程中，打印就是打印一些数据，往屏幕上输出一些数据的意思&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>1.7:第一个程序</title>
    <link href="http://example.com/2023/08/01/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-7%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2023/08/01/C%E8%AF%AD%E8%A8%80/%E7%AC%AC%E4%B8%80%E7%AB%A0/1-7%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-08-01T02:21:43.000Z</published>
    <updated>2024-01-03T09:57:12.850Z</updated>
    
    <content type="html"><![CDATA[<p>第一个程序–hello world</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一个程序–hello world&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/07/31/hello-world/"/>
    <id>http://example.com/2023/07/31/hello-world/</id>
    <published>2023-07-31T12:57:37.000Z</published>
    <updated>2024-01-19T01:07:58.750Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
